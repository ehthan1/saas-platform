// Code generated by goctl. DO NOT EDIT!
// Source: account.proto

package accountclient

import (
	"context"

	"github.com/portgas-x/saas-platform/service/account/cmd/rpc/account"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AccountInfoRequest    = account.AccountInfoRequest
	CreateAccountRequest  = account.CreateAccountRequest
	CreateAccountResponse = account.CreateAccountResponse
	GetAccountRequest     = account.GetAccountRequest
	GetAccountResponse    = account.GetAccountResponse
	LoginRequest          = account.LoginRequest
	PingRequest           = account.PingRequest
	PingResponse          = account.PingResponse
	RegisterRequest       = account.RegisterRequest
	Response              = account.Response

	Account interface {
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error)
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Response, error)
		GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
		CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	}

	defaultAccount struct {
		cli zrpc.Client
	}
)

func NewAccount(cli zrpc.Client) Account {
	return &defaultAccount{
		cli: cli,
	}
}

func (m *defaultAccount) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultAccount) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Response, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultAccount) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.GetAccount(ctx, in, opts...)
}

func (m *defaultAccount) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	client := account.NewAccountClient(m.cli.Conn())
	return client.CreateAccount(ctx, in, opts...)
}
